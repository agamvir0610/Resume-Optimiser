// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Billing Information
  billingInfo   BillingInfo?

  // Relations
  accounts      Account[]
  sessions      Session[]
  credits       Credit[]
  transactions  Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Credit {
  id        String   @id @default(cuid())
  userId    String
  amount    Int      // Number of credits
  type      String   // "purchase", "bonus", "consumption"
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model BillingInfo {
  id              String   @id @default(cuid())
  userId          String   @unique
  stripeCustomerId String? // Stripe customer ID
  paymentMethodId String? // Default payment method
  billingAddress  String? // JSON string of billing address
  taxId           String? // Tax ID for business customers
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("billing_info")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  stripeId    String?  // Stripe payment intent ID
  amount      Int      // Credits purchased
  price       Float    // Price paid in dollars
  status      String   // "pending", "completed", "failed"
  createdAt   DateTime @default(now())
  completedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}